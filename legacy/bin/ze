#!/usr/bin/env perl

use strict;
use locale;

use IO::File;
use File::Temp qw/ tempfile /;
require JSON;

my ($HOME, $VERB) = (scalar(length($ENV{'HOME'}) ? $ENV{'HOME'} : '~'), shift(@ARGV));

my ($AUTH, $URL) = @{rc()};

my $LOGSTASH = 0;

my $USE_BATCH = 1;
my $BATCH_ID = "";

my $ZE_VERSION = '1.2.0-zecmd';

my $UP_ONLY = 1;
my $HELP_ADV = 0;

my $CURL = '';
#############################
# Try to find installed curl
# Uncomment one of the following lines and modiy path as necessary
#############################

# $CURL = 'C:\Users\rodba\curl\curl-7.78.0-win64-mingw\bin\curl.exe';
$CURL = `which curl`; chomp($CURL);

#############################
# End curl setup
#############################

if( ( length( $CURL ) == 0 ) || ( ! -e $CURL ) || ( ! -r $CURL  ) ) {
    printf( STDERR "ERROR: curl command not found or is not executable\n" );
    printf( STDERR "       You may need to adjust the \$CURL variable at the top of this PERL script\n" );
    printf( STDERR "       \$CURL = %s\n", $CURL || '<empty string>' );
    exit( 1 );
}

my $UP_SMAP = {
	'log'    => {'p'=>qr/[a-zA-Z0-9\_\-]++/xs, 'c'=>'[a-zA-Z0-9_-]',    'h'=>'log', 'l'=>32, },
	'dtz'    => {'p'=>qr/[\w\/\+\-\:]++/xs,    'c'=>'[a-zA-Z0-9_/+-:]', 'h'=>'dtz', 'l'=>32, },
	'host'   => {'p'=>qr/[\w\/\+\-\:]++/xs,    'c'=>'[a-zA-Z0-9_/+-:]', 'h'=>'host', 'l'=>253, },
	'svcgrp' => {'p'=>qr/[\w\/\+\-\:]++/xs,    'c'=>'[a-zA-Z0-9_/+-:]', 'h'=>'svcgrp', 'l'=>253, },
	'ids'    => {'p'=>qr/[\x21-\x7e]++/xs,     'c'=>'ascii 0x21-0x7e',  'h'=>'ids',  'l'=>65536, },
	'cfgs'   => {'p'=>qr/[\x21-\x7e]++/xs,     'c'=>'ascii 0x21-0x7e',  'h'=>'cfgs', 'l'=>65536, },
	'tags'   => {'p'=>qr/[\x21-\x7e]++/xs,     'c'=>'ascii 0x21-0x7e',  'h'=>'tags', 'l'=>65536, },
};
my $UP_SKEYS = [keys %$UP_SMAP];

# AT SOME POINT SHOULD MOVE OTHER Ze-Query TYPE HEADERS INTO THESE STRUCTURES, TOO
my $CAT_SMAP = {
	'log'    => {'p'=>qr/[a-zA-Z0-9\_\,\-]++/xs, 'c'=>'[a-zA-Z0-9_-]',    'h'=>'X-Ze-Query-Log',    'l'=>32, },
	'ids'    => {'p'=>qr/[\x21-\x7e]++/xs,       'c'=>'ascii 0x21-0x7e',  'h'=>'X-Ze-Query-Ids',  	'l'=>65536, },
	'cfgs'   => {'p'=>qr/[\x21-\x7e]++/xs,       'c'=>'ascii 0x21-0x7e',  'h'=>'X-Ze-Query-Configs','l'=>65536, },
	'tags'   => {'p'=>qr/[\x21-\x7e]++/xs,       'c'=>'ascii 0x21-0x7e',  'h'=>'X-Ze-Query-Tags',	'l'=>65536, },
};
my $CAT_SKEYS = [keys %$CAT_SMAP];

my $CAT_DMAP = {
};

my $CAT_DKEYS = [keys %$CAT_DMAP];

main();

exit(0);

sub main() {

	if($VERB =~ m/^help$/xsi ) {
                $HELP_ADV = 0;
		print STDERR usage(), chr(10) or die("$!");
		exit(0);
	}

	if($VERB =~ m/^help\_adv$/xsi ) {
                $HELP_ADV = 1;
		print STDERR usage(), chr(10) or die("$!");
		exit(0);
	}

	common();

	if($VERB eq 'up') {
		up();
	} elsif($VERB eq 'cat') {
		print STDERR "cat is no longer supported\n";
		exit(0);
		cat();
	} elsif($VERB eq 'def') {
		print STDERR "def is no longer supported\n";
		exit(0);
		zdef();
	} elsif($VERB eq 'close') {
		print STDERR "close is no longer supported\n";
		exit(0);
	} elsif($VERB eq 'sql') {
		print STDERR "sql is no longer supported\n";
		exit(0);
		sql();
	} elsif($VERB eq 'batch') {
		batch();
	} else {
		print STDERR usage(), chr(10) or die("$!");
		exit(1);
	}
	return();
}

sub common() {

        my %valid_verbs = ();
        if( $UP_ONLY ) {
            %valid_verbs = map {$_ => 1} qw( help help_adv up batch );
        }
        else {
            %valid_verbs = map {$_ => 1} qw( help help_adv up cat def sql batch );
        }

        if( ! exists( $valid_verbs{$VERB} ) ) {
                printf( STDERR "Invalid action (%s). Must be one of: %s\n", $VERB || 'none', join( ', ', sort keys( %valid_verbs ) ) );
		printf( STDERR "Use \"$0 help\" for details\n");
		exit(1);
	}

	for(my $i=0;$i<scalar(@ARGV);$i++) {

		my $arg = $ARGV[$i];
		if($arg=~m/^\-\-auth\=(.++)$/xs) {
			$AUTH = $1;
			if ($AUTH eq "0") {
				$AUTH = "0000000000000000000000000000000000000000";
			}
			unless($AUTH=~m/^[a-zA-Z\d]++$/xs) {
				die("$0: auth token should be alphanumeric");
			}
			splice(@ARGV,$i,1); $i--; next;
		} elsif($arg=~m/^\-\-url\=(.++)$/xs) {
			$URL = $1;
			unless($URL=~m/^[\w\,\.\+\&\=\%\:\/\-]++$/xs) {
				die("$0: url should only have chars [a-zA-Z0-9i_,.+&=%:/-]");
			}
			splice(@ARGV,$i,1); $i--; next;
		} elsif($arg=~m/^\-\-logstash$/xs) {
			$LOGSTASH = 1;
			splice(@ARGV,$i,1); $i--; next;
		} elsif($arg=~m/^\-\-nobatch$/xs) {
			$USE_BATCH = 0;
			splice(@ARGV,$i,1); $i--; next;
		} elsif($arg=~m/^\-\-batch_id\=(.++)$/xs) {
			$BATCH_ID = $1;
			unless($BATCH_ID=~m/^[\w_\-]++$/xs) {
				die("$0: batch_id should only have chars [a-zA-Z0-9-_]");
			}
			splice(@ARGV,$i,1); $i--; next;
        }
	}

	$URL=~s/\/++$//xs;
	unless(length($URL)) {
		die("$0: url must be set with switch --url=<url> or else the line url=<url> must be present in $HOME/.zerc.\nUse \"$0 help\" for details\n");
	}

	unless(length($AUTH)) {
		die("$0: auth must be set with --auth=<auth token> or else the line auth=<auth token> in $HOME/.zerc.\nUse \"$0 help\" for details\n");
	}

	return();
}

sub zdef() {

	my ($amap) = ({});

	for(my $i=0;$i<scalar(@ARGV);$i++) {

		my $arg = $ARGV[$i];
		if($arg=~m/^\-\-etype\=(.++)$/xs) {
			$amap->{'X-Ze-Query-Etype'} = $1;
		} else {
			die("$0: unsupported arg $arg");
		}
	}

	$URL=~s/\/(?:sql|def|close|ask|cat|post|api|)\/?$//xs;
	$URL=join('/',($URL,'api/v2/def'));

	my $ze_hdrs_str = '';
	my $amap_keys = [keys %$amap];
	foreach my $key(@$amap_keys) {
		if($key=~m/^X\-Ze\-/xs) {
			$ze_hdrs_str = sprintf( "%s -H \"%s: %s\"", $ze_hdrs_str, $key, $amap->{$key} );
		}
	}
	my $cmd = sprintf("%s --silent -S --insecure -H \"Authorization: Token %s\" -H \"Content-Type: application/octet-stream\" %s -X POST \"%s\"",
			$CURL,
			$AUTH,
			$ze_hdrs_str,
			$URL);
	my $result = `$cmd`;
	my $exit_code = $?;
	if( $exit_code ) {
		printf( STDERR "ERROR: Unable to get data\n" );
		exit( $exit_code );
	}
        # printf( STDOUT "%s", $result );
	return();
}

sub cat() {

	my ($amap) = (zargs($CAT_SMAP, $CAT_SKEYS));

	$URL=~s/\/(?:sql|def|close|ask|cat|post|api|)\/?$//xs;
	$URL=join('/',($URL,'api/v2/cat'));

	dcheck($amap, $CAT_DMAP, $CAT_DKEYS);

	for(my $i=0;$i<scalar(@ARGV);$i++) {

		my $arg = $ARGV[$i];
		if($arg=~m/^\-\-fmt\=(.++)$/xs) {
			$amap->{'X-Ze-Query-Format'} = $1;
		} elsif($arg=~m/^\-\-lim\=(.++)$/xs) {
			$amap->{'X-Ze-Query-Limit'} = $1;
		} elsif($arg=~m/^\-\-etype\=(.++)$/xs) {
			$amap->{'X-Ze-Query-Etype'} = $1;
		} elsif($arg=~m/^\-\-time\=(.++)$/xs) {
			$amap->{'X-Ze-Query-Time'} = $1;
		} elsif($arg=~m/^\-\-new$/xs) {
			$amap->{'X-Ze-Query-New'} = 1;
		} #else {
			#die("$0: unsupported arg $arg");
		#}
	}

	my $ze_hdrs_str = '';
	my $amap_keys = [keys %$amap];
	foreach my $key(@$amap_keys) {
		if($key=~m/^X\-Ze\-/xs) {
			$ze_hdrs_str = sprintf( "%s -H \"%s: %s\"", $ze_hdrs_str, $key, $amap->{$key} );
		}
	}
	my $cmd = sprintf("%s --silent -S --insecure -H \"Authorization: Token %s\" %s \"%s\"",
			$CURL,
			$AUTH,
			$ze_hdrs_str,
			$URL);
	my $result = `$cmd`;
	my $exit_code = $?;
	if( $exit_code ) {
		printf( STDERR "ERROR: Unable to get data\n" );
		exit( $exit_code );
	}
	printf( STDOUT "%s", $result );
	return();
}

sub sql() {

        my ( $fh, $fn, $amap, $curl_fn ) = ( undef, undef, {}, undef );

	for(my $i=0;$i<scalar(@ARGV);$i++) {

		my $arg = $ARGV[$i];
		if($arg=~m/^\-\-file\=(.++)$/xs) {
			$fn = $1;
			unless($fn=~m/^[\x21-\x7e]++$/xs) {
				printf( STDERR "ERROR: File %s should be ascii non-whitespace\n", $fn );
				exit( 1 );
			}
			if(! -e $fn) {
				printf( STDERR "ERROR: File %s does not exist (%s)\n", $fn, $! );
				exit( 1 );
                        }
                        splice(@ARGV,$i,1); $i--; next;
                } elsif($arg=~m/^\-\-file$/xs) {
			printf( STDERR "ERROR: File argument must be specified (--file=...)\n" );
			exit( 1 );
                }
	}

	for(my $i=0;$i<scalar(@ARGV);$i++) {

		my $arg = $ARGV[$i];
		if($arg=~m/^\-\-fmt\=(.++)$/xs) {
			$amap->{'X-Ze-Query-Format'} = $1;
		} elsif($arg=~m/^\-\-query\=(.++)$/xs) {
			my $qtxt = $1;
			if(defined $fn) {
				die("$0: Cannot specify both file and query");
			}
			unless($qtxt=~m/\;\s*$/xs) { $qtxt=~s/\s*$/\;/xs; }
			($fh, $fn) = tempfile();
			print $fh $qtxt,chr(10) or die("$!");
			$fh->flush();
			$fh->close() or die("$!");
		} else {
			die("$0: unsupported arg $arg");
		}
	}

	$URL=~s/\/(?:sql|def|close|ask|cat|post|api|)\/?$//xs;
	$URL=join('/',($URL,'api/v2/sql'));

	$curl_fn = length($fn) ? $fn : '-';

	my $ze_hdrs_str = '';
	my $amap_keys = [keys %$amap];
	foreach my $key(@$amap_keys) {
		if($key=~m/^X\-Ze\-/xs) {
			$ze_hdrs_str = sprintf( "%s -H \"%s: %s\"", $ze_hdrs_str, $key, $amap->{$key} );
		}
	}
	my $cmd = sprintf("%s --silent -S --insecure -H \"Authorization: Token %s\" -H \"Content-Type: application/octet-stream\" -H \"Transfer-Encoding: chunked\" %s -X POST -T %s \"%s\"",
			$CURL,
			$AUTH,
			$ze_hdrs_str,
			$curl_fn,
			$URL);
	my $result = `$cmd`;
	my $exit_code = $?;
	if( $exit_code ) {
		printf( STDERR "ERROR: Unable to get data\n" );
		exit( $exit_code );
	}
	printf( STDOUT "%s", $result );
	return();
}

sub sort_opts() {
    if( $a eq 'ids' ) { return -1; }
    if( $b eq 'ids' ) { return 1; }
    return( $a cmp $b );
}

sub begin_batch($$) {
	my $BATCH_URL=$_[0];
        my $batch_id=$_[1];
        my %req_data;
	$req_data{ 'retention_hours' } = 48;
	$req_data{ 'processing_method' } = "opportunistic";
	$req_data{ 'batch_id' } = $batch_id;;
	my ($req_fh, $req_fname) = tempfile();
	print $req_fh JSON::encode_json(\%req_data);
	$req_fh->flush();
	my $cmd = sprintf("%s --silent -S --insecure -H \"Authorization: Token %s\" -H \"Content-Type: application/json\" -X POST -T %s \"%s\"",
			$CURL,
			$AUTH,
			$req_fname,
			$BATCH_URL);

        # printf(STDOUT "%s", $cmd);
	my $result = `$cmd`;
	# printf(STDOUT "%s", $result);
	chomp( $result );
	my $exit_code = $?;
	unlink $req_fname;
	if( $exit_code != 0 ) {
		printf( STDERR "Unable to reach server\n" );
		exit( 1 );
	}
	if( $result =~ /\<title\>(.*)\<\/title\>/xsi ) {
		printf( STDERR "Unable to get API result from server (%s)\n", $1 );
		exit( 1 );
	}
	my $data = JSON::decode_json($result);
	if (exists($data->{'data'}{'batch_id'})) {
		    $batch_id = $data->{'data'}{'batch_id'};
	} else {
		my $reason = 'Unknown';
	   if( exists( $data->{'message'} )) {
		    $reason = sprintf( "%s (%d)", $data->{'message'}, $data->{'code'} );
		}
		printf( STDERR "ERROR: No batch id returned by server\n" );
		printf( STDERR "       Reason: %s\n", $reason );
		printf( STDERR "       Please check that you have specified a valid auth token\n" );
		exit( 1 );
	}
	# printf(STDERR "Batch upload id: %s\n",$batch_id);
	return $batch_id;
}

sub cancel_batch($$) {
	if (! $USE_BATCH) {
		return;
	}

	my %req_data;
	my $BATCH_URL=$_[0] . '/' . $_[1];

	$req_data{ 'cancel' } = $JSON::true;
	my ($req_fh, $req_fname) = tempfile();
	print $req_fh JSON::encode_json(\%req_data);
	$req_fh->flush();
	my $cmd = sprintf("%s --silent -S --insecure -H \"Authorization: Token %s\" -H \"Content-Type: application/json\" -X PUT -T %s \"%s\"",
			$CURL,
			$AUTH,
			$req_fname,
			$BATCH_URL);
	printf(STDERR "Cancelling batch upload id %s\n", $_[1]);
	my $result = `$cmd`;
	# printf(STDOUT "%s", $result);
	chomp( $result );
	my $exit_code = $?;
	unlink $req_fname;
	if( $exit_code != 0 ) {
		printf( STDERR "Unable to reach server\n" );
		exit( 1 );
	}
	if( $result =~ /\<title\>(.*)\<\/title\>/xsi ) {
		printf( STDERR "Unable to get API result from server (%s)\n", $1 );
		exit( 1 );
	}
	my $data = JSON::decode_json($result);
	if (exists($data->{'data'}{'state'})) {
		    my $new_state = $data->{'data'}{'state'};
		    my $batch_id = $data->{'data'}{'batch_id'};
		    printf(STDERR "State for batch upload %s is %s\n",
		               $batch_id, $new_state);
	} else {
		my $reason = 'Unknown';
	   if( exists( $data->{'message'} )) {
		    $reason = sprintf( "%s (%d)", $data->{'message'}, $data->{'code'} );
		}
		printf( STDERR "ERROR: No state returned by server\n" );
		printf( STDERR "       Reason: %s\n", $reason );
		printf( STDERR "       Please check that you have specified a valid auth token\n" );
		exit( 1 );
	}
}

sub end_batch($$) {
	my %req_data;
	my $BATCH_URL=$_[0] . '/' . $_[1];

	if (! $USE_BATCH) {
		return;
	}

	$req_data{ 'uploads_complete' } = $JSON::true;
	my ($req_fh, $req_fname) = tempfile();
	print $req_fh JSON::encode_json(\%req_data);
	$req_fh->flush();
	my $cmd = sprintf("%s --silent -S --insecure -H \"Authorization: Token %s\" -H \"Content-Type: application/json\" -X PUT -T %s \"%s\"",
			$CURL,
			$AUTH,
			$req_fname,
			$BATCH_URL);
    # printf(STDERR "Committing batch upload id %s\n", $_[1]);
	my $result = `$cmd`;
    # printf(STDOUT "%s", $result);
	chomp( $result );
	my $exit_code = $?;
	unlink $req_fname;
	if( $exit_code != 0 ) {
		printf( STDERR "Unable to reach server\n" );
		exit( 1 );
	}
	if( $result =~ /\<title\>(.*)\<\/title\>/xsi ) {
		printf( STDERR "Unable to get API result from server (%s)\n", $1 );
		exit( 1 );
	}
	my $data = JSON::decode_json($result);
	if (exists($data->{'data'}{'state'})) {
		    my $new_state = $data->{'data'}{'state'};
		    my $batch_id = $data->{'data'}{'batch_id'};
		    printf(STDERR "State for batch upload %s is %s\n",
		               $batch_id, $new_state);
	} else {
		my $reason = 'Unknown';
	   if( exists( $data->{'message'} )) {
		    $reason = sprintf( "%s (%d)", $data->{'message'}, $data->{'code'} );
		}
		printf( STDERR "ERROR: No state returned by server\n" );
		printf( STDERR "       Reason: %s\n", $reason );
		printf( STDERR "       Please check that you have specified a valid auth token\n" );
		exit( 1 );
	}
}

sub get_batch($$) {
	my $BATCH_URL=$_[0] . '/' . $_[1];

	my $cmd = sprintf("%s --silent -S --insecure -H \"Authorization: Token %s\" -H \"Content-Type: application/json\" -X GET \"%s\"",
			$CURL,
			$AUTH,
			$BATCH_URL);

        #  printf(STDOUT "%s", $cmd);
	my $result = `$cmd`;
        # printf(STDOUT "%s", $result);
	chomp( $result );
	my $exit_code = $?;
	if( $exit_code != 0 ) {
		printf( STDERR "Unable to reach server\n" );
		exit( 1 );
	}
	if( $result =~ /\<title\>(.*)\<\/title\>/xsi ) {
		printf( STDERR "Unable to get API result from server (%s)\n", $1 );
		exit( 1 );
}
	my $data = JSON::decode_json($result);

        if (!scalar($data->{'data'}[0]) or !exists $data->{'data'}[0]{'batch_id'}) {
                my $reason = 'Unknown';
                if( exists( $data->{'message'} )) {
	                $reason = sprintf( "%s (%d)", $data->{'message'}, $data->{'code'} );
	                }
	                printf( STDERR "ERROR: No batch information returned by server\n" );
	                printf( STDERR "       Reason: %s\n", $reason );
                    my $code = $data->{'code'};
                    if ($code == 404) {
	                    printf( STDERR "       Please check the batch id is correct\n" );
                } else {
	                    printf( STDERR "       Please check that you have specified a valid auth token\n" );
                    }
	                exit( 1 );
        }
        return $data->{'data'}[0];
}

sub batch_state($) {
        my $BATCH_URL=$_[0];
        unless (length($BATCH_ID) > 0) {
                die("'ze batch state' requires --batch_id option");
        };
        my $data = get_batch($BATCH_URL, $BATCH_ID);
        unless (exists($data->{'state'})) {
                die("State for batch $BATCH_ID was not found.");
        }
        my $state = $data->{'state'};
        printf(STDOUT "State for batch upload $BATCH_ID: $state\n");
}

sub batch_show($) {
        my $BATCH_URL=$_[0];
        unless (length($BATCH_ID) > 0) {
                die("'ze batch show' requires --batch_id option");
        };
        my $data = get_batch($BATCH_URL, $BATCH_ID);
        unless (exists($data->{'state'})) {
                die("State for batch $BATCH_ID was not found.");
        }
        # use Data::Dumper;
        # print Dumper($data);
        printf(STDOUT "         Batch ID: %s\n", $data->{'batch_id'});
        printf(STDOUT "            State: %s\n", $data->{'state'});
        if (length($data->{'reason'}) > 0) {
            printf(STDOUT "   Failure Reason: %s\n", $data->{'reason'});
        }
        printf(STDOUT "          Created: %s\n", $data->{'created'});
        printf(STDOUT "  Completion Time: %s\n", $data->{'completion_time'});
        printf(STDOUT "  Expiration Time: %s\n", $data->{'expiration_time'});
        printf(STDOUT "Retention (hours): %d\n", $data->{'retention_hours'});
        printf(STDOUT "            Lines: %d\n", $data->{'lines'});
        printf(STDOUT "  Bundles Created: %d\n", $data->{'bundles'});
        printf(STDOUT "Bundles Completed: %d\n", $data->{'bundles_completed'});
        my $upload_time_secs = $data->{'upload_time_secs'};
        my $upload_time_min = 0;
        if ($upload_time_secs > 60) {
            $upload_time_min = $upload_time_secs / 60;
            $upload_time_secs = $upload_time_secs % 60;
        }
        printf(STDOUT "      Upload time: %d:%-2d min:sec\n", $upload_time_min, $upload_time_secs);
        my $processing_time_secs = $data->{'processing_time_secs'};
        my $processing_time_min = 0;
        if ($processing_time_secs > 60) {
            $processing_time_min = $processing_time_secs / 60;
            $processing_time_secs = $processing_time_secs % 60;
        }
        printf(STDOUT "  Processing time: %d:%-2d min:sec\n", $processing_time_min, $processing_time_secs);
        printf(STDOUT "\n");
}

sub batch() {
    if (!@ARGV) { 
        die("Missing subcommand for 'ze batch'");
    }
    my $BATCH_URL = join('/',($URL,'log/api/v2/batch'));
    my $subc = $ARGV[0];
    if ($subc eq "state") {
        batch_state($BATCH_URL);
    } elsif ($subc eq "show") {
        batch_show($BATCH_URL);
    } elsif ($subc eq "begin") {
        my $batch_id = begin_batch($BATCH_URL, $BATCH_ID);
        printf(STDOUT "New batch upload id: %s\n", $batch_id);
    } elsif ($subc eq "end") {
        unless (length($BATCH_ID) > 0) {
                die("'ze batch end' requires --batch_id option");
        };
        end_batch($BATCH_URL, $BATCH_ID);
    } elsif ($subc eq "cancel") {
        unless (length($BATCH_ID) > 0) {
                die("'ze batch cancel' requires --batch_id option");
        };
        cancel_batch($BATCH_URL, $BATCH_ID);
    } else {
        die("Invalid subcommand for 'ze batch': $subc");
    }
}

sub up() {

	my ($fn, $amap, $curl_fn ) = (undef, zargs($UP_SMAP, $UP_SKEYS), undef);

	for(my $i=0;$i<scalar(@ARGV);$i++) {

		my $arg = $ARGV[$i];
		if($arg=~m/^\-\-file\=(.++)$/xs) {
			$fn = $1;
			unless($fn=~m/^[\x21-\x7e]++$/xs) {
				die("$0: file should be ascii non-whitespace");
			}
                        if(! -e $fn) {
                                die("$0: file $fn does not exist");
                        }
			splice(@ARGV,$i,1); $i--; next;
		} elsif($arg=~m/^\-\-file$/xs) {
			printf( STDERR "ERROR: File argument must be specified (--file=...)\n" );
			exit( 1 );
		        }
	}

	if( scalar(keys %$amap) == 0 and ! $LOGSTASH ) {
		print STDERR "$0: WARNING: No metadata switches set. That's fine for a quick test, but probably not what you want in real use. Run 'ze help' for more information.\n" or die("$!");
	}

	my %meta_data;
	$meta_data{ 'ze_log_collector_vers' } = $ZE_VERSION;
	$meta_data{ 'stream' } = 'native';
	$meta_data{ 'ze_tm' } = $JSON::false;
	if(length($fn)) {
                $meta_data{ 'stream' } = 'zefile';
		unless(length($amap->{'log'})) {
			if($fn=~m/(?=[^\/]++$)([a-zA-Z]{3,})/xs) {
				$meta_data{'logbasename'} = lc($1);
			} else {
				$meta_data{'logbasename'} = 'stream';
			}
		}
	} else {
	        if( ! exists( $amap->{'log'} ) and ! $LOGSTASH ) {
			die("$0: logbasename must be specified for streaming (--log=...)");
	        }
            # Do not use a batch for continuous streaming input.
            $USE_BATCH=0;
	}

	$URL=~s/\/(?:sql|def|close|ask|cat|post|api|)\/?$//xs;
	my $TOKEN_URL = join('/',($URL,'log/api/v2/token'));
	my $BATCH_URL = join('/',($URL,'log/api/v2/batch'));
	my $POST_URL = join('/',($URL, $LOGSTASH ? 'log/api/v2/ingest?log_source=logstash&log_format=json_batch' : 'log/api/v2/post'));

	$curl_fn = length($fn) ? $fn : '-';

	my $amap_keys = [keys %$amap];
	foreach my $key( sort sort_opts @$amap_keys) {
		if ($key =~ m/^log/xs) {
                        $meta_data{ 'logbasename' } = $amap->{$key};
                } elsif ($key =~ m/^dtz/xs) {
                        $meta_data{ 'tz' } = $amap->{$key};
                } elsif ($key =~ m/^host/xs) {
                        $meta_data{ 'ids' }{'zid_host'} = $amap->{$key};
                } elsif ($key =~ m/^svcgrp/xs) {
                        $meta_data{ 'ids' }{'ze_deployment_name'} = $amap->{$key};
		} else {
			my %kvs = split /[,=]/, $amap->{$key};
		            $meta_data{ $key } = \%kvs;
		}
	}
        if ( ! exists( $meta_data{'ids'}{'ze_deployment_name'} ) ) {
                print STDERR "$0: WARNING: --svcgrp not set. Using default.\n" or die("$!");
                $meta_data{'ids'}{'ze_deployment_name'} = 'default';
        }
	if (exists($meta_data{'cfgs'}{'ze_batch_id'}) && $USE_BATCH) {
		printf(STDERR "'ze_batch_id' detected in cfgs, 'ze up' will not create a new batch upload\n");
		$USE_BATCH=0;
	}
	if ( length($BATCH_ID) > 0) {
        if (exists($meta_data{'cfgs'}{'ze_batch_id'}))  {
            die("--batch_id conflicts with 'ze_batch_id' in cfgs");
        }
		$meta_data{'cfgs'}{'ze_batch_id'}=$BATCH_ID;
        $USE_BATCH=0;
    }
	my $batch_id = '';
	if ($USE_BATCH) {
		$batch_id = begin_batch($BATCH_URL,'');
		$meta_data{'cfgs'}{'ze_batch_id'}=$batch_id;
	}
	my $json_text = JSON::encode_json(\%meta_data);
	my ($meta_fh, $meta_fname) = tempfile();
	print $meta_fh JSON::encode_json(\%meta_data);
	$meta_fh->flush();

	my $cmd = sprintf("%s --silent -S --insecure -H \"Authorization: Token %s\" -H \"Content-Type: application/json\" -X POST -T %s \"%s\"",
			$CURL,
			$AUTH,
			$meta_fname,
			$TOKEN_URL);
	my $result = `$cmd`;
	chomp( $result );
	my $exit_code = $?;
	if( $exit_code != 0 ) {
	    printf( STDERR "Unable to reach server\n" );
	    exit( 1 );
	}
	if( $result =~ /\<title\>(.*)\<\/title\>/xsi ) {
	    printf( STDERR "Unable to get API result from server (%s)\n", $1 );
	    cancel_batch($BATCH_URL, $batch_id);
	    exit( 1 );
	}
	my $data = JSON::decode_json($result);
	my $stream_token = '';
	if (exists($data->{'token'})) {
	        $stream_token = $data->{'token'};
	} else {
		my $reason = 'Unknown';
		if( exists( $data->{'message'} )) {
			$reason = sprintf( "%s", $data->{'message'});
		}
		printf( STDERR "ERROR: No stream token returned by server\n" );
		printf( STDERR "       Reason: %s\n", $reason );
		printf( STDERR "       Please check that you have specified a valid auth token\n" );
		cancel_batch($BATCH_URL, $batch_id);
		exit( 1 );
	}

	my $cmd = sprintf("%s --silent -S --insecure -H \"Authorization: Token %s\" -H \"Content-Type: application/octet-stream\" -H \"Transfer-Encoding: chunked\" -X POST -T %s \"%s\"",
			$CURL,
			$LOGSTASH ? $AUTH : $stream_token,
			$curl_fn,
			$POST_URL);
	my $result = `$cmd`;
    chomp( $result );
	my $exit_code = $?;
	if( $exit_code ) {
		printf( STDERR "ERROR: Unable to send data\n" );
		cancel_batch($BATCH_URL, $batch_id);
		exit( $exit_code );
	}
	if( $result =~ /\<title\>(.*)\<\/title\>/xsi ) {
	    printf( STDERR "Unable to upload to server (%s)\n", $1 );
	    cancel_batch($BATCH_URL, $batch_id);
	    exit( 1 );
	}
	if( $result ne '' ) {
	    printf( STDERR "Unable to upload to server (%s)\n", $result );
	    cancel_batch($BATCH_URL, $batch_id);
	    exit( 1 );
	}
	end_batch($BATCH_URL, $batch_id);
	printf( STDOUT "Sent successfully\n" );
	unlink $meta_fname;
	return();
}

sub zargs($$) {

	my ($amap, $smap, $skeys) = ({}, splice(@_, 0, 2));

	for(my $i=0;$i<scalar(@ARGV);$i++) {

		my $arg = $ARGV[$i];
		for(my $j=0;$j<scalar(@$skeys);$j++) {

			my $s = $skeys->[$j];
			if(substr($arg,0,length($s)+3) eq "--$s=") {

				my $m = $smap->{$s};
				my ($p,$c,$h,$l) = ($m->{'p'},$m->{'c'},$m->{'h'},$m->{'l'});

				if(length($c)) {
					if($arg=~m/^\-\-$s\=(${p})$/xs) {
						my $tmp = $1;
						if(length($tmp) > $l) {
							die("$0: arg $arg: up to $l characters allowed");
						}
						$amap->{$h} = $tmp;
						splice(@$skeys,$j,1); $j--; next;
					} else {
						die("$0: arg $arg: only $c characters allowed");
					}
				} else {
					if($arg=~m/^\-\-$s$/xs) {
						$amap->{$h} = 1;
						splice(@$skeys,$j,1); $j--; next;
					} else {
						die("$0: arg $arg: no assignment allowed (flag only)");
					}
				}
			}
		}
	}

	return($amap);
}

sub dcheck($$$) {

	my ($amap, $dmap, $dkeys) = splice(@_, 0, 3);

	for(my $i=0;$i<scalar(@$dkeys);$i++) {

		my $hdr = $dkeys->[$i];
		if(length($dmap->{$hdr}) && !length($amap->{$hdr})) {

			$amap->{$hdr} = $dmap->{$hdr};
		}
	}

	return();
}

sub rc() {

	my ($fh, $auth, $url) = (new IO::File(), undef, undef);

	if(open($fh,"<$HOME/.zerc")) {

		while(my $line = readline($fh)) {
			if($line=~m/^auth\=([a-zA-Z\d]++)\s*+$/xs) {
				$auth = $1;
			} elsif($line=~m/^url\=([\w\-\,\.\+\&\=\%\:\/]++)\s*+$/xs) {
				$url = $1;
			}
		}

		close($fh);
		undef($fh);
		$! = '';

	} else {

		undef($fh);
		$! = '';
	}

	return([$auth,$url]);
}

sub usage() {
	# cat [--fmt=<(csv|json|pp)>] [--lim=<int>] [--log=<log>] [--etype=<etype>] [--time=<time>] [--new]
	# def [--fmt=<(csv|json|pp)>] [--lim=<int>] [--log=<log>] [--etype=<etype>]
	# sql [--fmt=<(csv|json|pp)>]
        my $help_text    = join( chr( 10 ), (
		"ze help - get help on ze usage",
		"",
        ));
        my $help_text_up = join( chr( 10 ), (
		"ze up - upload data to Zebrium",
		"",
		"  ze up                                                                              \\",
		"    [--url=<url>] [--auth=<token>]                                                   \\",
                "    [--file=<path>] [--log=<logtype>] [--host=<hostname>] [--svcgrp=<service-group>] \\",
		"                                                                                     \\",
                "    [--dtz=<tz>]                                                                     \\",
		"    [--ids=<name1=val1,name2=val2,...]                                               \\",
                "    [--cfgs=<name1=val1,name2=val2,...]                                              \\",
		"    [--tags=<name1=val1,name2=val2,...]                                              \\",
		"    [--logstash]",
		"    [--nobatch]",
        "    [--batch_id=<batch_id>]",
		"",
		"",
		"    --url      - Zebrium Log Collector URL <ZE_LOG_COLLECTOR_URL> (omit to look for url=<url> line in $HOME/.zerc)",
		"    --auth     - Zebrium Log Collector Token <ZE_LOG_COLLECTOR_TOKEN> (omit to look for auth=<token> line in $HOME/.zerc)",
		"    --file     - Path to file being uploaded (omit to read from STDIN)",
		"    --log      - Logtype of file being uploaded (omit to use base name from file=<path> or 'stream' if STDIN)",
		"    --host     - Hostname or other identifier representing the source of the file being uploaded",
		"    --svcgrp   - Defines a failure domain boundary for anomaly correlation. This allows you to collect logs from multiple",
                "                 applications or support cases and isolate the logs of one from another so as not to mix these",
                "                 in a Root Cause Report. This is referred to as a Service Group in the Zebrium UI",
                "",
                "                 If omitted, Service Group will be set to \"default\". Default is used to denote a service group that",
                "                 represents shared-services. For example, a database that is shared between two otherwise distinctly separate applications",
                "                 would be considered a shared-service. In this example scenario, you would set the Service Group for one application to \"app01\"",
                "                 and to \"app02\" for the other application. For the database logs, you would either omit the --svcgrp setting or you could ",
                "                 explicitly set it do \"default\" using --svcgrp=default.",
                "",
                "                 With this configuration, Root Cause Reports will consider correlated anomalies across:",
                "",
                "                     \"app01\" log events and default (i.e. database logs) and",
                "                     \"app02\" log events and default (i.e. database logs)",
                "",
                "                 but not across:",
                "",
                "                     \"app01\" and \"app02\"",
		"",
                "    EXAMPLES:",
		"",
                "    1. Ingest three log files associated with the same support case \"sr12345\" (does not assume a .zerc configuration file exists):",
		"",
                "       ze up --file=/casefiles/sr12345/messages.log --svcgrp=sr12345 --host=node01 --log=messages --url=<ZE_LOG_COLLECTOR_URL> --auth=<ZE_LOG_COLLECTOR_TOKEN>",
                "       ze up --file=/casefiles/sr12345/application.log --svcgrp=sr12345 --host=node01 --log=application --url=<ZE_LOG_COLLECTOR_URL> --auth=<ZE_LOG_COLLECTOR_TOKEN>",
                "       ze up --file=/casefiles/sr12345/db.log --svcgrp=sr12345 --host=db01 --log=db --url=<ZE_LOG_COLLECTOR_URL> --auth=<ZE_LOG_COLLECTOR_TOKEN>",
		"",
		"",
                "    2. Ingest a continuous tail of /var/log/messages. When reading from a stream (e.g. STDIN) rather than from a file, ze requires the –log flag (assumes a .zerc configuration file exists):",
		"",
                "       tail -f /var/log/messages | ze up --log=varlogmsgs --svcgrp=monitor01 --host=mydbhost",
		"",
        ));
        my $help_text_up_adv = join( chr( 10 ), (
                "",
                "    ADVANCED OPTIONS:",
                "",
		"    --dtz      - Time Zone to use for logs without time zone (default: GMT)",
		"    --ids      - ids of the stream as a comma-separated list of name-value pairs",
		"    --cfgs     - configs of the stream as a comma-separated list of name-value pairs",
		"    --tags     - tags of the stream as a comma-separated list of name-value pairs",
		"    --logstash - file is in logstash format with appropriate \@ze_ keys",
        "    --nobatch  - do not create automatic batch upload",
        "    --batch_id - existing batch upload to use.",
		"",
        ));
        my $help_text_batch = join( chr( 10 ), (
             "ze batch - batch upload related operations",
             "",
             "  ze batch <subcommand> ",
		     "     [--auth=<token>] [--url=<url>]   ",
             "",
             "  Subcommands:",
             "    ze batch begin [--batch_id=<batch_id>] --  Create new batch upload",
             "    ze batch end    --batch_id=<batch_id>  --  Mark uploads for batch completed",
             "    ze batch state  --batch_id=<batch_id>  --  Show the state of a batch upload",
             "    ze batch show   --batch_id=<batch_id>  --  Show details of a batch upload",
             "    ze batch cancel --batch_id=<batch_id>  --  Cancel batch being uploaded",
             "",
        ));
        my $help_text_other = join( chr( 10 ), (
		"ze sql - run SQL command",
		"",
		"  ze sql                                                                       \\",
		"    [--file=<path>] [--auth=<token>] [--url=<url>] [--query=<query>]           \\",
		"    [--fmt=(csv|json|pp|raw)>]",
		"",
		"    --file   - omit to read from STDIN or query=<query>",
		"    --auth   - omit to look for auth=<token> line in $HOME/.zerc",
		"    --url    - omit to look for url=<url> line in $HOME/.zerc",
		"    --query  - omit to read from STDIN or file=<file>",
		"    --fmt    - show lines raw, or along with etype in csv/json/pretty-print",
		"",
		"ze def - show etype definition",
		"",
		"  ze def --etype=<etype> [--auth=<token>] [--url=<url>]                        \\",
		"",
		"    --etype  - show only events of type <etype>",
		"    --auth   - omit to look for auth=<token> line in $HOME/.zerc",
		"    --url    - omit to look for url=<url> line in $HOME/.zerc",
		"",
		"ze cat - show logs",
		"",
		"  ze cat                                                                       \\",
		"    [--auth=<token>] [--url=<url>] [--fmt=(csv|json|pp|raw)>] [--lim=<int>]    \\",
		"    [--ids=<name1=val1,name2=val2,...] [--cfgs=<name1=val1,name2=val2,...]     \\",
		"    [--tags=<name1=val1,name2=val2,...]",
		"    [--log=<log>] [--etype=<etype>] [--new] [--time=<yyyy[-mm[-dd[Thh[:mi[:ss]]]]]>]",
		"",
		"    --auth   - omit to look for auth=<token> line in $HOME/.zerc",
		"    --url    - omit to look for url=<url> line in $HOME/.zerc",
		"    --fmt    - show lines raw, or along with etype in csv/json/pretty-print",
		"    --lim    - limit output to <int> events",
		"    --ids    - ids of the log as a comma-separated list of name-value pairs",
		"    --cfgs   - configs of the log as a comma-separated list of name-value pairs",
		"    --tags   - tags of the log as a comma-separated list of name-value pairs",
		"    --log    - show only events from <log>",
		"    --etype  - show only events of type <etype>",
		"    --new    - show only first-ever occurrence by etype",
		"    --time   - limit results in time: truncating timestamp widens window",
	));
        if( $UP_ONLY ) {
            if( $HELP_ADV ) {
                return( $help_text . "\n" . $help_text_up . "\n" . $help_text_up_adv . "\n" . $help_text_batch . "\n" );
            } else {
                return( $help_text . "\n" . $help_text_up . "\n" . $help_text_batch . "\n" );
            }
        } else {
            if( $HELP_ADV ) {
                return( $help_text . "\n" . $help_text_up . "\n" . $help_text_up_adv . "\n" . $help_text_batch . "\n" . $help_text_other . "\n" );
            } else {
                return( $help_text . "\n" . $help_text_up . "\n" . $help_text_batch . "\n" . $help_text_other . "\n" ) ;
            }
        }
}
